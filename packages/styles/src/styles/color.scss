@use 'sass:color';
@use "sass:meta";
@use "sass:string";

@use "variables";
@use "rules";

/// Checks if a value is a color
/// Проверяет, является ли значение цветом
/// @param {Color} $color
/// @return {Boolean}
@function isColorRbgOrVar($color) {
  @return meta.type-of($color) == color or (
    $color != 'none' and
    $color != 'transparent' and
    $color != 'initial' and
    $color != 'inherit'
  )
}

/// Checks if a color is suitable for the palette
/// Проверяет, является ли цвет подходящим для палитры
/// @param {Color} $color
/// @return {Boolean}
@function isPalette($color) {
  @return string.index($color, '--') != null
}

/// Returns color value by its code
/// Возвращает значение цвета по его коду
/// @param {Color} $color
/// @param {Number} $opacity
/// @param {Boolean} $gradient if true, returns as an image/ если true, возвращает в виде изображения
/// @return {String}
@function getColor(
  $color,
  $opacity: 1,
  $gradient: false
) {
  $value: $color;

  @if (meta.type-of($color) == color) {
    $value: rgba(#{toColorRbg($color)}, #{$opacity});
  }

  @if $gradient {
    @return toGradient($value);
  } @else {
    @return $value;
  }
}

/// Checking if a color is part of the list of used colors
/// Проверка, является ли цвет частью списка используемых цветов
/// @param {Color} $color
/// @return {String}
@function getColorByPalette($color) {
  @each $name, $value in variables.$designsPalette {
    @if (string.index($color, #{$name}#{')'}) != null) {
      @return $value;
    }
  }

  @return null;
}

/// Checking if a color is part of the list of saturation levels
/// Проверка, является ли цвет частью списка насыщенности
/// @param {Color} $color
/// @return {String}
@function getColorByShade($color) {
  @each $design, $list in variables.$designsShade {
    @if ($design == variables.$designsDesign) {
      @each $value in $list {
        @if (string.index($color, #{'-'}#{$value}#{')'}) != null) {
          @return #{'--'}#{variables.$designsDesign}#{'-palette-'}#{$value};
        }
      }
    }
  }

  @return null;
}

/// Returns value for palette
/// Возвращает значение для палитры
/// @param {Color} $color
/// @return {String}
@function getPalette($color) {
  @if (isPalette($color)) {
    $palette: getColorByPalette($color);

    @if ($palette != null) {
      @return getPaletteItem($palette, $color);
    } @else {
      $shade: getColorByShade($color);

      @if ($shade) {
        @return #{var(#{$shade}, #{toColorRbg($color)})};
      }
    }
  }
  @return #{var(--sys-palette, #{toColorRbg($color)})}
}

/// Returns value for palette
/// Возвращает значение для палитры
/// @param {Color} $color
/// @return {String}
@function getPaletteOpacity($color) {
  @if (isPalette($color)) {
    $palette: getColorByPalette($color);

    @if ($palette != null) {
      @return getPaletteItemOpacity($palette, $color);
    } @else {
      $shade: getColorByShade($color);

      @if ($shade) {
        @return #{var(#{$shade}-opacity, #{toColorOpacity($color)})};
      }
    }
  }
  @return #{var(--sys-palette-opacity, #{toColorOpacity($color)})}
}

/// Returns value for palette
/// Возвращает значение для поиск нужный цветов
/// @param {List} $palette
/// @param {Color|String} $color
/// @return {String}
@function getPaletteItem($palette, $color) {
  $value: #{toColorRbg($color)};

  @if (meta.type-of($palette) == list) {
    @each $name in $palette {
      $value: #{var(#{$name}, #{$value})}
    }

    @return $value;
  } @else {
    @return #{var(#{$palette}, #{$value})};
  }
}

/// Returns value for palette
/// Возвращает значение для поиск нужный цветов
/// @param {List} $palette
/// @param {Color|String} $color
/// @return {String}
@function getPaletteItemOpacity($palette, $color) {
  $value: #{toColorOpacity($color)};

  @if (meta.type-of($palette) == list) {
    @each $name in $palette {
      $value: #{var(#{$name}-opacity, #{$value})}
    }

    @return $value;
  } @else {
    @return #{var(#{$palette}-opacity, #{$value})};
  }
}

/// Getting the color code for insertion into the property
/// Получение кода цвета для вставки в свойство
/// @param {String} $name
/// @param {Color|String} $defaultValue
/// @return {String}
@function getColorValue($name, $defaultValue: null) {
  @if ($defaultValue) {
    @return rgba(
                    var(#{$name}, #{toColorRbg($defaultValue)}),
                    var(#{$name}-opacity, var(#{$name}-opacity-custom, 1))
    );
  }

  @return rgba(
                  var(#{$name}),
                  var(#{$name}-opacity, var(#{$name}-opacity-custom, 1))
  );
}

/// Getting the system color code for insertion into the property
/// Получение кода системного цвета для вставки в свойство
/// @param {String} $name
/// @return {String}
@function getColorValueSys($name) {
  @return getColorValue(--sys-#{$name});
}

/// Color conversion to rgb type
/// Преобразование цвета в тип RGB
/// @param {Color} $color
/// @return {String}
@function toColorRbg($color) {
  @if (meta.type-of($color) == color) {
    @return color.channel($color, 'red', rgb) + ', '
      + color.channel($color, 'green', rgb) + ', '
      + color.channel($color, 'blue', rgb);
  }

  @return $color;
}

/// Gets the transparency of the color
/// Получает прозрачность цвета
/// @param {Color} $color
/// @return {String}
@function toColorOpacity($color) {
  @if (meta.type-of($color) == color) {
    @return color.alpha($color);
  } @else if (rules.isCustomVar(#{$color})) {
    @return toCustomVarOpacity($color);
  }

  @return $color;
}

/// Conversion of color into images for working with background-image
/// Преобразование цвета в изображения для работы с background-image
/// @param {Color} $color
/// @return {String}
@function toGradient($color) {
  @return linear-gradient(0deg, #{$color}, #{$color});
}

@function toCustomVarRgb($color) {
  @if (rules.isCustomVar($color)) {
    @return rgba(#{$color}, #{toCustomVarOpacity($color, 1)})
  }

  @return $color
}

/// Adding the transparency property
/// Добавление свойства прозрачности
@function toCustomVarOpacity($color, $defaultValue: null) {
  @if ($defaultValue) {
    @return rules.strReplace($color, ')', '-opacity, '#{$defaultValue}')');
  }

  @return rules.strReplace($color, ')', '-opacity)');
}

/// Initializes palette-related opacity variables
/// Инициализирует связанные с палитрой переменные прозрачности
@mixin initPalette {
  @include colorOpacity(initial);
  @include backgroundOpacity(initial);
  @include gradientOpacity(initial);
}

/// Defines system color variables (RGB and opacity)
/// Определяет системные цветовые переменные (RGB и непрозрачность)
/// @param {String} $name variable suffix (e.g. 'color')
/// @param {Color|String} $color input color or CSS var
/// @param {Boolean} $important add !important to declarations
@mixin colorSys($name, $color, $important: false) {
  @if ($important) {
    --sys-#{$name}: #{toColorRbg($color)} !important;
  } @else {
    --sys-#{$name}: #{toColorRbg($color)};
  }

  @if (rules.isCustomVar($color)) {
    @if ($important) {
      --sys-#{$name}-opacity-custom: #{toCustomVarOpacity($color)} !important;
    } @else {
      --sys-#{$name}-opacity-custom: #{toCustomVarOpacity($color)};
    }
  }
}

/// Defines system palette variables (RGB and opacity)
/// Определяет системные переменные палитры (RGB и непрозрачность)
/// @param {String} $name palette key suffix
/// @param {Color|String} $color input color or CSS var
@mixin colorSysPalette($name, $color) {
  --sys-palette-#{$name}: #{getPalette($color)};

  @if (rules.isCustomVar($color)) {
    --sys-palette-#{$name}-opacity: #{getPaletteOpacity($color)};
  }
}

/* Palette */

/// Sets base palette RGB value
/// Устанавливает базовое RGB‑значение палитры
/// @param {Color|String} $color input color or CSS var
@mixin palette($color) {
  --sys-palette: #{toColorRbg($color)};
}

/// Maps a custom variable into palette chain
/// Привязывает пользовательскую переменную к палитре
/// @param {Color|String} $color CSS custom property
@mixin paletteVar($color) {
  @include colorSysPalette('var', $color);
}

/// Applies palette color to text
/// Применяет цвет палитры к тексту
/// @param {Color|String} $color palette reference or color
@mixin paletteColor($color) {
  @include colorSysPalette('color', $color);
  @include color(#{var(--sys-palette-color)});
}

/// Applies palette color to stroke
/// Применяет цвет палитры к обводке (stroke)
/// @param {Color|String} $color palette reference or color
@mixin paletteStroke($color) {
  @include colorSysPalette('color', $color);
  @include stroke(#{var(--sys-palette-color)});
}

/// Applies palette color to background
/// Применяет цвет палитры к фону
/// @param {Color|String} $color palette reference or color
@mixin paletteBackground($color) {
  @include colorSysPalette('background', $color);
  @include backgroundColor(#{var(--sys-palette-background)});
}

/// Applies palette color to fill
/// Применяет цвет палитры к заливке (fill)
/// @param {Color|String} $color palette reference or color
@mixin paletteFill($color) {
  @include colorSysPalette('background', $color);
  @include fill(#{var(--sys-palette-background)});
}

/// Applies palette gradient to background-image
/// Применяет градиент палитры к background-image
/// @param {Color|String} $color palette reference or color
@mixin paletteGradient($color) {
  @include colorSysPalette('gradient', $color);
  @include gradient(#{var(--sys-palette-gradient)});
}

/// Applies palette color to border
/// Применяет цвет палитры к границе (border)
/// @param {Color|String} $color palette reference or color
@mixin paletteBorder($color) {
  @include colorSysPalette('border', $color);
  @include borderColor(#{var(--sys-palette-border)});
}

/* Color */

/// Sets text color via system variables
/// Устанавливает цвет текста через системные переменные
/// @param {Color|String} $color color or CSS var
/// @param {Number|null} $opacity optional opacity [0..1]
/// @param {Boolean} $important add !important
/// @param {String} $propertyName CSS property name (default 'color')
@mixin color($color, $opacity: null, $important: false, $propertyName: 'color') {
  @if ($color == 'init') {
    @include colorInit($important, $propertyName);
  } @else if (isColorRbgOrVar($color)) {
    @include colorSys('color', $color, $important);
    @include colorOpacity($opacity, $important, false, $propertyName);
    @include colorInit($important, $propertyName);
  } @else {
    #{$propertyName}: $color;
  }
}

/// Sets text color opacity variable; can init property
/// Устанавливает переменную непрозрачности текста; может инициализировать свойство
/// @param {Number} $opacity opacity [0..1]
/// @param {Boolean} $important add !important
/// @param {Boolean} $init immediately apply computed color
/// @param {String} $propertyName CSS property name
@mixin colorOpacity($opacity, $important: false, $init: false, $propertyName: 'color') {
  @if ($opacity != null) {
    @if ($important) {
      --sys-color-opacity: #{$opacity} !important;
    } @else {
      --sys-color-opacity: #{$opacity};
    }

    @if ($init) {
      @include colorInit($propertyName, $important);
    }
  }
}

/// Applies computed system text color
/// Применяет вычисленный системный цвет текста
/// @param {Boolean} $important add !important
/// @param {String} $propertyName CSS property name
@mixin colorInit($important: false, $propertyName: 'color') {
  @if ($important) {
    #{$propertyName}: getColorValueSys('color') !important;
  } @else {
    #{$propertyName}: getColorValueSys('color');
  }
}

/* Stroke */

/// Sets stroke color via system variables
/// Устанавливает цвет обводки (stroke) через системные переменные
/// @param {Color|String} $color color or CSS var
/// @param {Number|null} $opacity optional opacity [0..1]
/// @param {Boolean} $important add !important
@mixin stroke($color, $opacity: null, $important: false) {
  @include color($color, $opacity, $important, 'stroke');
}

/// Sets stroke opacity variable; can init property
/// Устанавливает переменную непрозрачности обводки; может инициализировать свойство
/// @param {Number} $opacity opacity [0..1]
/// @param {Boolean} $important add !important
/// @param {Boolean} $init immediately apply computed stroke
@mixin strokeOpacity($opacity, $important: false, $init: false) {
  @include colorOpacity($opacity, $important, $init, 'stroke');
}

/// Applies computed stroke color
/// Применяет вычисленный цвет обводки
/// @param {Boolean} $important add !important
@mixin strokeInit($important: false) {
  @include colorInit($important, 'stroke');
}

/* Background */

/// Sets background color via system variables
/// Устанавливает цвет фона через системные переменные
/// @param {Color|String} $color color, 'as-color', transparent or CSS var
/// @param {Number|null} $opacity optional opacity [0..1]
/// @param {Boolean} $important add !important
/// @param {String} $propertyName CSS property name (default 'background-color')
@mixin backgroundColor($color, $opacity: null, $important: false, $propertyName: 'background-color') {
  @if ($color == 'init') {
    @include backgroundInit($important, $propertyName);
  } @else if ($color == 'as-color') {
    @include backgroundAsColor;
  } @else if ($color == transparent) {
    @include backgroundColor(#000000, 0, $important, $propertyName);
  } @else if (isColorRbgOrVar($color)) {
    @include colorSys('background', $color, $important);
    @include backgroundOpacity($opacity, $important, false, $propertyName);
    @include backgroundInit($important, $propertyName);
  } @else {
    #{$propertyName}: $color;
  }
}

/// Sets background opacity variable; can init property
/// Устанавливает переменную непрозрачности фона; может инициализировать свойство
/// @param {Number} $opacity opacity [0..1]
/// @param {Boolean} $important add !important
/// @param {Boolean} $init immediately apply computed background
/// @param {String} $propertyName CSS property name
@mixin backgroundOpacity($opacity, $important: false, $init: false, $propertyName: 'background-color') {
  @if ($opacity != null) {
    @if ($important) {
      --sys-background-opacity: #{$opacity} !important;
    } @else {
      --sys-background-opacity: #{$opacity};
    }

    @if ($init) {
      @include backgroundInit($propertyName, $important);
    }
  }
}

/// Sets background-size and disables repeat
/// Устанавливает background-size и отключает повтор
/// @param {String} $value background-size value
@mixin backgroundSize($value) {
  background-size: #{$value};
  background-repeat: no-repeat;
}

/// Applies computed background color
/// Применяет вычисленный цвет фона
/// @param {Boolean} $important add !important
/// @param {String} $propertyName CSS property name
@mixin backgroundInit($important: false, $propertyName: 'background-color') {
  @if ($important) {
    #{$propertyName}: #{getColorValueSys('background')} !important;
  } @else {
    #{$propertyName}: getColorValueSys('background');
  }
}

/* Fill */

/// Sets fill color via background helpers
/// Устанавливает цвет заливки (fill) через фоновые миксины
/// @param {Color|String} $color color or CSS var
/// @param {Number|null} $opacity optional opacity [0..1]
/// @param {Boolean} $important add !important
@mixin fill($color, $opacity: null, $important: false) {
  @include backgroundColor($color, $opacity, $important, 'fill');
}

/// Sets fill opacity variable; can init property
/// Устанавливает переменную непрозрачности заливки; может инициализировать свойство
/// @param {Number} $opacity opacity [0..1]
/// @param {Boolean} $important add !important
/// @param {Boolean} $init immediately apply computed fill
@mixin fillOpacity($opacity, $important: false, $init: false) {
  @include backgroundOpacity($opacity, $important, $init);
}

/// Applies computed fill color
/// Применяет вычисленный цвет заливки
/// @param {Boolean} $important add !important
@mixin fillInit($important: false) {
  @include backgroundInit($important, 'fill');
}

/* Gradient */

/// Sets gradient (background-image) via system variables
/// Устанавливает градиент (background-image) через системные переменные
/// @param {Color|String} $color color or CSS var
/// @param {Number|null} $opacity optional opacity [0..1]
/// @param {Boolean} $important add !important
@mixin gradient($color, $opacity: null, $important: false) {
  @if ($color == 'init') {
    @include gradientInit($important);
  } @else if (isColorRbgOrVar($color)) {
    @include colorSys('gradient', $color, $important);
    @include gradientOpacity($opacity, $important, false);
    @include gradientInit($important);
  } @else {
    background-image: $color;
  }
}

/// Sets gradient opacity variable; can init property
/// Устанавливает переменную непрозрачности градиента; может инициализировать свойство
/// @param {Number} $opacity opacity [0..1]
/// @param {Boolean} $important add !important
/// @param {Boolean} $init immediately apply computed gradient
@mixin gradientOpacity($opacity, $important: false, $init: false) {
  @if ($opacity != null) {
    @if ($important) {
      --sys-gradient-opacity: #{$opacity} !important;
    } @else {
      --sys-gradient-opacity: #{$opacity};
    }

    @if ($init) {
      @include gradientInit($important);
    }
  }
}

/// Applies computed gradient background image
/// Применяет вычисленный градиент для background-image
/// @param {Boolean} $important add !important
@mixin gradientInit($important: false) {
  @if ($important) {
    background-image: #{toGradient(#{getColorValueSys('gradient')})} !important;
  } @else {
    background-image: #{toGradient(#{getColorValueSys('gradient')})};
  }
}

/* Border */

/// Sets border color via system variables
/// Устанавливает цвет границы (border) через системные переменные
/// @param {Color|String} $color color or CSS var
/// @param {Number|null} $opacity optional opacity [0..1]
/// @param {Boolean} $important add !important
@mixin borderColor($color, $opacity: null, $important: false) {
  @if ($color == 'init') {
    @include borderInit($important);
  } @else if (isColorRbgOrVar($color)) {
    @include colorSys('border', $color, $important);
    @include borderOpacity($opacity, $important, false);
    @include borderInit($important);
  } @else {
    border-color: $color;
  }
}

/// Sets border opacity variable; can init property
/// Устанавливает переменную непрозрачности границы; может инициализировать свойство
/// @param {Number} $opacity opacity [0..1]
/// @param {Boolean} $important add !important
/// @param {Boolean} $init immediately apply computed border
@mixin borderOpacity($opacity, $important: false, $init: false) {
  @if ($opacity != null) {
    @if ($important) {
      --sys-border-opacity: #{$opacity} !important;
    } @else {
      --sys-border-opacity: #{$opacity};
    }

    @if ($init) {
      @include borderInit($important);
    }
  }
}

/// Applies computed border color
/// Применяет вычисленный цвет границы
/// @param {Boolean} $important add !important
@mixin borderInit($important: false) {
  @if ($important) {
    border-color: getColorValueSys('border') !important;
  } @else {
    border-color: getColorValueSys('border');
  }
}

/* As */

/// Renders text color using palette variables
/// Рендерит цвет текста, используя переменные палитры
@mixin colorAsPalette() {
  color: rgba(
                  var(--sys-palette-color, var(--sys-color)),
                  var(--sys-palette-color-opacity, var(--sys-color-opacity))
  );
}

/// Sets background from --sys-color variables
/// Устанавливает фон из переменных --sys-color
@mixin backgroundAsColor() {
  @include backgroundColor(var(--sys-color), var(--sys-color-opacity));
  --sys-background-opacity-custom: var(--sys-color-opacity-custom);
}

/// Sets border from --sys-color variables
/// Устанавливает границу из переменных --sys-color
@mixin borderAsColor() {
  @include borderColor(var(--sys-color), var(--sys-color-opacity));
  --sys-border-opacity-custom: var(--sys-color-opacity-custom);
}
