Нужно подготовить документацию для компонента на языке [wikiLanguage]. Следуй строго формату и требованиям ниже. Не добавляй ничего лишнего вне описанного.

====================================
1) Изучи текущий код компонента
====================================
```
[code]
```
Проанализируй структуру, props, события, слоты, типы, внутреннюю логику.

====================================
2) Добавь недостающие комментарии к типам
====================================
Добавь краткие одноязычные (на [wikiLanguage]) JSDoc-комментарии к отсутствующим типам.
Код для испправления:
```ts
// types.ts
[types]
```
Ниже продублируй итог без обёртки:
[types]

Требования к комментариям:
- Однострочные для простых полей.
- Многострочные для блоков логики.
- Без дублирования очевидного.

====================================
3) Истории (stories) для Storybook
====================================
Создай только минимально необходимые примеры. Каждый пример — максимально простой, без лишних обёрток, только то, что демонстрирует суть.
Код для испправления:
```ts
// ComponentDoc.stories.ts
[stories]
```
Правила:
- Не трогать те сторис, который уже есть, только добавления.
- Не добавляй истории ради заполнения.
- Если компонент имеет разные режимы (например, состояния или варианты отображения), покажи по одному примеру.
- Имена историй — в стиле PascalCase без лишних слов.
- Минимизируй импорты: только то, что требуется.

====================================
4) MDX-документация (описание компонента)
====================================
Подготовь полное описание компонента в формате MDX. Строгая стилистика: никаких таблиц, никаких лишних разделов.
Код для испправления:
```md
// UiPlayerLite.mdx
[md]
```

Правила структуры MDX:
- В начале: [description] — Краткое описание назначения (1–3 предложения): максимально коротко передаёт суть компонента.
- Далее: основной текст (документация) — начинается без заголовка. Это [doc].
- Можно дорабатывать существующий текст, изменя, но не удалять. Удаляй только лишнее или не актуальный.
- Обязательно перечисли слоты (если есть) и события (если есть) в заданном формате.
- Не описывай props списком, если они простые. Подробно описывай только сложные связки (например, зависимые props) или составные типы.
- Пример использования — в конце соответствующего смыслового блока или в самом низу, если один общий пример.
- Слоты и события — строго в формате ниже. Если типов нет — блок с типом опускается.

Формат слотов:
```
## Слоты
### `имяСлота`
Краткое описание назначения слота. Можно маркированным списком выделить особенности.
```ts
// тип слота (если есть пропсы)
```
```
Если слотов несколько — каждый с подпунктом `###`.

Формат событий:
```
## События
### `имяСобытия`
Описание когда и зачем испускается.
```ts
// сигнатура обработчика
```
```

Пример блока props для связанных свойств (использовать ТОЛЬКО если реально нужно):
```
## Свойства выделения текста
... (как в примере ниже)
```

Пример описания слота (не вставляй дословно, адаптируй):
```
### `prefix`
Слот для размещения контента в начале компонента перед основным содержимым.
- Подходит для иконок, индикаторов или меток
- Не влияет на структуру
```

Пример описания события (адаптируй под контекст):
```
### `click`
Событие клика по корневой области компонента.
```ts
function onClick(event: MouseEvent, value: EventClickValue) {
  // обработка
}

type EventClickValue = {
  type: string
  value: any
  detail: Record<string, any> | undefined
}
```
```

====================================
5) Итоговый возврат
====================================
Верни результат строго в формате (ничего лишнего до или после):

[types.ts]
#########
[ComponentDoc.stories.ts]
#########
[UiPlayerLite.mdx]

Где:
- не добавляй ничего лишнего. (типа ```ts)
- не оборачивай в блоки.
- не оборачивай в ```ts или что-то подбного.
- [types.ts] — итоговый блок типов с комментариями.
- [ComponentDoc.stories.ts] — итоговый файл историй.
- [UiPlayerLite.mdx] — итоговая MDX-документация.

====================================
Ограничения и стилистика
====================================
- Никаких таблиц.
- Никаких произвольных дополнительных разделов.
- Не добавляй раздел "Props", если нет сложных зависимостей.
- Не дублируй описание одного и того же.
- Уважай язык [wikiLanguage] — если это "en" используй английский, иначе соответствующий язык.
- Не используй placeholder'ы вне оговорённых.
- Кодовые блоки: для типов и событий — ```ts, для разметки — ```html при необходимости.
- Сторисы: только необходимые сценарии, без лишних визуальных украшений.

====================================
Пример (не включать в ответ, только как ориентир стиля)
====================================
## Свойства выделения текста

Свойства `highlight` и `highlightLengthStart` предназначены для управления выделением текста в компонентах.

### Свойства

- **highlight** — Текст для выделения в содержимом компоненте
- **highlightLengthStart** — Минимальная длина значения highlight для начала выделения

### Взаимосвязь свойств

Свойства работают совместно для обеспечения интеллектуального выделения текста. `highlight` определяет что выделять, а `highlightLengthStart` контролирует когда начинать выделение.

- `highlight` содержит строку текста, которую нужно найти и выделить в компоненте
- `highlightLengthStart` устанавливает минимальную длину строки поиска для активации функции выделения
- Выделение активируется только когда длина `highlight` достигает значения `highlightLengthStart`
- Это предотвращает нежелательное выделение при вводе коротких строк поиска
- Оба свойства обеспечивают оптимальный пользовательский опыт при работе с поиском и фильтрацией

