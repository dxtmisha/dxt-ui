1) изучи текуший код
```
[code]
```

2) добав нехватаюший комиты на [wikiLanguage]
```ts
// types.ts
[types]
```
[types]

3) (это файл для работа storybook) добав сториы для примеры, если думаешь что нужно, на [wikiLanguage]. Примеры дольжен быть минимальный, как можно меньшее лишнее элементы
```ts
// ComponentDoc.stories.ts
[stories]
```

4) (это файл для описания в storybook) добав польный описания компонента для документации на [wikiLanguage]. Строги стилистика для документаций.
```md
// UiPlayerLite.mdx
[md]
```
где [description] - это описание компонента
[doc] - это документация по компоненту
[doc] - док начинаеится бес заголовка
обезаното указываит какие есть слоты и события
слоты и события в такой формате
```
## слоты
### названия слота
описания слота
```ts
описания тип слота
```
(если у слота нету пропсов, не добавляем нечего)

## события
### названия события
описания события
```ts
описания тип события
```

если нету метка, не добавляем нечего
не каких таблиц
не надо писанить props виде таблица
props надо писанить только, если она принимает сложные типы, или несколько props отвечает за одну функцию
пример использования дольжен быть в конце самой описания этого примера
примеры (stories) дольжен только у тех, у кого есть описания

Пример описания слота
```
### `prefix`

Слот для размещения контента в начале компонента, перед основным содержимым.

- Отображается в левой части компонента (или справа в RTL режиме)
- Подходит для иконок, номеров, индикаторов или коротких меток
- Не влияет на основную структуру компонента
- Обеспечивает визуальную идентификацию или дополнительную информацию

```

Пример описания события
```
### `click`

Событие клика компонента, возникающее при взаимодействии пользователя с элементом.

```ts
function onClick (event: MouseEvent, value: EventClickValue) {
    // обработка события клика
}

type EventClickValue = {
  /** Идентификатор места нажатия, задается через атрибут data-event-type у элемента */
  type: string
  /** Значение компонента */
  value: any
  /** Дополнительные данные события */
  detail: Record<string, any> | undefined
}
```
```

Пример описания props
```
## Свойства выделения текста

Свойства `highlight` и `highlightLengthStart` предназначены для управления выделением текста в компонентах.

### Свойства

- **highlight** — Текст для выделения в содержимом компоненте
- **highlightLengthStart** — Минимальная длина значения highlight для начала выделения

### Взаимосвязь свойств

Свойства работают совместно для обеспечения интеллектуального выделения текста. `highlight` определяет что выделять, а `highlightLengthStart` контролирует когда начинать выделение.

- `highlight` содержит строку текста, которую нужно найти и выделить в компоненте
- `highlightLengthStart` устанавливает минимальную длину строки поиска для активации функции выделения
- Выделение активируется только когда длина `highlight` достигает значения `highlightLengthStart`
- Это предотвращает нежелательное выделение при вводе коротких строк поиска
- Оба свойства обеспечивают оптимальный пользовательский опыт при работе с поиском и фильтрацией
```

5) собери результат виде:
// types.ts
[types.ts]
#########
// ComponentDoc.stories.ts
[ComponentDoc.stories.ts]
#########
// UiPlayerLite.mdx
[UiPlayerLite.mdx]
и верни его мне (нечего лишнего)
