import { toCamelCaseFirst, toKebabCase } from '@dxt-ui/functional'

import { PropertiesConfig } from '../Properties/PropertiesConfig'
import { PropertiesFile } from '../Properties/PropertiesFile'

import type { LibraryData, LibraryList } from '../../types/libraryTypes'

import { UI_DIRS_LIBRARY, UI_DIRS_COMPONENTS } from '../../config'

/**
 * Class for working with the list of components.
 *
 * Класс для работы со списком компонентов.
 */
export class LibraryItems {
  protected readonly items: LibraryList

  /**
   * Constructor
   */
  constructor() {
    this.items = this.initItems()
  }

  /**
   * Returns the list of components divided by design groups.
   *
   * Возвращает список компонентов, разделенных по группам дизайна.
   */
  get(): LibraryList {
    return this.items
  }

  /**
   * Returns the list of components as an array.
   *
   * Возвращает список компонентов в виде массива.
   */
  getComponentList(): LibraryData[] {
    const list: LibraryData[] = []

    this.items.forEach(item => list.push(...item.components))

    return list
  }

  /**
   * Writes data in the file.
   *
   * Записывает данные в файле.
   * @param name file name/ название файла
   * @param data values for writing/ значения для записи
   * @param extension file extension by default is json/ расширение файла по умолчанию - json
   */
  write(
    name: string,
    data: string[],
    extension: string = 'ts'
  ): void {
    const file = extension === 'json'
      ? data
      : [
          '// This file is generated by a script, do not edit.',
          '// Этот файл генерируется скриптом, не редактировать.',
          '',
          ...data,
          ''
        ]

    PropertiesFile.write(
      UI_DIRS_LIBRARY,
      name,
      file.join('\r\n'),
      extension
    )
  }

  /**
   * Returns a list of components.
   *
   * Возвращает список компонентов.
   */
  protected getComponents(): LibraryData[] {
    const list: LibraryData[] = []
    const dirs = PropertiesFile.readDir(this.getComponentsPath())
    const design = PropertiesConfig.getDesignName()

    dirs.forEach((dir) => {
      if (PropertiesFile.isDir(dir)) {
        const name = toKebabCase(dir).trim()

        list.push({
          name,
          design,
          alias: `${design}.${name}`,
          codeFull: toCamelCaseFirst(`${design}-${name}`),
          dir
        })
      }
    })

    return list
  }

  /**
   * Returns the path to the design system components directory
   *
   * Возвращает путь к директории компонентов дизайн-системы
   */
  protected getComponentsPath(): string[] {
    return [...UI_DIRS_COMPONENTS, PropertiesConfig.getProjectName()]
  }

  /**
   * Initializes data about the component.
   *
   * Инициализирует данные о компоненте.
   */
  protected initItems(): LibraryList {
    return [
      {
        name: PropertiesConfig.getDesignName(),
        components: this.getComponents()
      }
    ]
  }
}
