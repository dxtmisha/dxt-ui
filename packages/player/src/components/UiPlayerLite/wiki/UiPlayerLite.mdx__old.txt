import {Canvas, Meta} from '@storybook/addon-docs/blocks'
import {
    StorybookDescriptions,
    StorybookMain
} from '@dxt-ui/wiki/storybook'

import * as Component from './UiPlayerLite.stories'

<Meta of={Component}/>
<StorybookMain
    name={'UiPlayerLite'}
    description={'Компонент `UiPlayerLite` представляет собой упрощенный видеоплеер, позволяющий отображать видеоконтент и взаимодействовать с его статусом воспроизведения. Поддерживает различные статусы и расширяем с помощью слотов.'}
    story={Component.Component}
/>

Компонент `UiPlayerLite` предоставляет базовые возможности для встраивания и управления видеоконтентом. Он включает в себя HTML-элемент `<video>` для воспроизведения медиа и кнопку для изменения статуса воспроизведения. Гибкость компонента обеспечивается возможностью использования слотов для встраивания дополнительного контента в различные части плеера.

## Слоты
### `top`
Слот для размещения произвольного контента в верхней части компонента, перед текстовым индикатором статуса.
- Используется для добавления заголовков, пользовательских контролов или дополнительной информации.
- Контент этого слота отображается выше основной области видео.
```ts
interface UiPlayerLiteSlots {
  top?(props: any): any
}
```
### `default`
Основной слот для размещения произвольного контента в нижней части компонента, под видеоплеером.
- Идеально подходит для добавления описаний видео, ссылок на похожий контент или любых других элементов, связанных с воспроизводимым видео.
```ts
interface UiPlayerLiteSlots {
  default?(props: any): any
}
```

## События
### `status`
Событие `status` испускается при изменении статуса воспроизведения плеера. В текущей реализации, нажатие на кнопку "Go" внутри компонента приводит к испусканию этого события со значением `'play'`.

- Позволяет внешней логике реагировать на действия пользователя или внутренние изменения состояния плеера.
```ts
function onStatus(newStatus: 'play' | 'pause' | 'stop'): void
```

## Пример использования
Ниже представлен пример использования компонента `UiPlayerLite` с заполнением слотов и обработкой события изменения статуса.

```html
<template>
  <UiPlayerLite
    url="https://sample-videos.com/video123/mp4/720/big_buck_bunny_720p_1mb.mp4"
    :status="currentStatus"
    @status="handleStatusChange"
  >
    <template #top>
      <h3>Мой любимый видеоклип</h3>
    </template>
    <template #default>
      <p>Пожалуйста, наслаждайтесь этим демонстрационным видео.</p>
    </template>
  </UiPlayerLite>
</template>

<script setup lang="ts">
import { ref } from 'vue';
import UiPlayerLite from './UiPlayerLite.vue'; // Путь к вашему компоненту

const currentStatus = ref('stop'); // Инициализируем статус

function handleStatusChange(newStatus: string) {
  console.log('Новый статус плеера:', newStatus);
  currentStatus.value = newStatus; // Обновляем статус
}
</script>
