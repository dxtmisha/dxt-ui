Нужно подготовить документацию для компонента на языке ru. Следуй строго формату и требованиям ниже. Не добавляй ничего лишнего вне описанного.

====================================
1) Изучи текущий код компонента
====================================
```
// File: component-template.js
import { defineComponent, mergeDefaults, createElementBlock, openBlock, renderSlot, createTextVNode, createElementVNode, toDisplayString } from "/Volumes/T7/Git/dxt-ui/node_modules/vue/dist/vue.runtime.esm-bundler.js";
const UiPlayerLiteDefaults = {
  status: "stop"
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "UiPlayerLite"
  },
  __name: "UiPlayerLite",
  props: /* @__PURE__ */ mergeDefaults({
    url: { type: String, required: false },
    status: { type: String, required: false }
  }, UiPlayerLiteDefaults),
  emits: ["status"],
  setup(__props, { expose: __expose }) {
    __expose();
    const __returned__ = {};
    Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
    return __returned__;
  }
});
const _export_sfc = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};
const _hoisted_1 = { class: "ui-player-lite" };
const _hoisted_2 = ["src"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [
    renderSlot(_ctx.$slots, "top"),
    createTextVNode(
      " status: " + toDisplayString($props.status) + " ",
      1
      /* TEXT */
    ),
    createElementVNode("button", {
      onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("status", "play"))
    }, "Go"),
    createElementVNode("video", {
      src: $props.url,
      class: "ui-player-lite__video"
    }, null, 8, _hoisted_2),
    renderSlot(_ctx.$slots, "default")
  ]);
}
const item = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "/Volumes/T7/Git/dxt-ui/packages/player/src/components/UiPlayerLite/UiPlayerLite.vue"]]);
const UiPlayerLite = item;
export {
  UiPlayerLite
};
//# sourceMappingURL=component-template.js.map
// File: component-template.js.map
{"version":3,"file":"component-template.js","sources":["../../../types.ts","../../../UiPlayerLite.vue","../../../index.ts"],"sourcesContent":["// types.ts\n/**\n * Определяет события, генерируемые компонентом UiPlayerLite.\n * Defines the events emitted by the UiPlayerLite component.\n */\nexport type UiPlayerLiteEmits = {\n  /**\n   * Событие изменения статуса проигрывателя.\n   * Испускается при попытке изменить статус воспроизведения, например, при нажатии кнопки \"Go\".\n   * Emitted when there's an attempt to change the player's status, e.g., by clicking \"Go\".\n   * @event\n   * @param {string} status - Новый статус проигрывателя ('play', 'pause', 'stop').\n   */\n  status: [status: string]\n}\n\n/**\n * Определяет слоты, доступные в компоненте UiPlayerLite.\n * Defines the slots available in the UiPlayerLite component.\n */\nexport interface UiPlayerLiteSlots {\n  /**\n   * Слот для размещения контента в верхней части компонента, перед статусом и видео.\n   * Slot for content at the top of the component, before status and video.\n   */\n  top? (props: any): any\n  /**\n   * Слот для размещения контента в основной части компонента, после элемента видео.\n   * Default slot for content, placed after the video element.\n   */\n  default? (props: any): any\n}\n\n/**\n * Определяет свойства (props) компонента UiPlayerLite.\n * Defines the properties (props) for the UiPlayerLite component.\n */\nexport interface UiPlayerLiteProps {\n  /**\n   * URL видеофайла для воспроизведения.\n   * The URL of the video file to play.\n   */\n  url?: string\n  /**\n   * Текущий статус проигрывателя. По умолчанию 'stop'.\n   * The current status of the player. Defaults to 'stop'.\n   * @values 'play', 'pause', 'stop'\n   */\n  status?: 'play' | 'pause' | 'stop'\n}\n\n/**\n * Значения по умолчанию для свойств компонента UiPlayerLite.\n * Default values for UiPlayerLite component props.\n * @constant\n * @type {UiPlayerLiteProps}\n */\nexport const UiPlayerLiteDefaults: UiPlayerLiteProps = {\n  status: 'stop'\n}\n","<script setup lang=\"ts\">\nimport {\n  UiPlayerLiteDefaults,\n  type UiPlayerLiteEmits,\n  type UiPlayerLiteProps,\n  type UiPlayerLiteSlots\n} from './types'\n\ndefineOptions({\n  name: 'UiPlayerLite'\n})\n\nwithDefaults(defineProps<UiPlayerLiteProps>(), UiPlayerLiteDefaults)\ndefineEmits<UiPlayerLiteEmits>()\ndefineSlots<UiPlayerLiteSlots>()\n</script>\n\n<template>\n  <div class=\"ui-player-lite\">\n    <slot name=\"top\"/>\n    status: {{ status }}\n    <button @click=\"$emit('status', 'play')\">Go</button>\n    <video :src=\"url\" class=\"ui-player-lite__video\"/>\n    <slot/>\n  </div>\n</template>\n\n<style lang=\"scss\">\n.ui-player-lite {\n  &__video {\n    width: 480px;\n    height: 270px;\n  }\n}\n</style>\n","import type { DefineSetupFnComponent, ShortEmitsToObject, SlotsType } from 'vue'\nimport type { UiPlayerLiteEmits, UiPlayerLiteProps, UiPlayerLiteSlots } from './types'\n\nimport item from './UiPlayerLite.vue'\n\nexport type * from './types'\n\nexport const UiPlayerLite: DefineSetupFnComponent<\n  UiPlayerLiteProps,\n  ShortEmitsToObject<UiPlayerLiteEmits>,\n  SlotsType<UiPlayerLiteSlots>\n> = item\n"],"names":["_openBlock","_createElementBlock","_renderSlot","_createTextVNode","_toDisplayString","_createElementVNode"],"mappings":";AAyDO,MAAM,uBAA0C;AAAA,EACrD,QAAQ;AACV;;;;;;;;;;;;;;;;;;;;;;;;;ACzCO,MAAA,aAAA,EAAA,OAAM,iBAAA;;;AAAX,SAAAA,UAAA,GAAAC,mBAMM,OANN,YAMM;AAAA,IALJC,WAAkB,KAAA,QAAA,KAAA;AAAA,IAAAC;AAAAA,MAAA,cACVC,gBAAG,aAAM,IAAG;AAAA,MACpB;AAAA;AAAA,IAAA;AAAA,IAAAC,mBAAoD,UAAA;AAAA,MAA3C,SAAK,sCAAE,KAAA,MAAK,UAAA,MAAA;AAAA,IAAA,GAAoB,IAAE;AAAA,IAC3CA,mBAAiD,SAAA;AAAA,MAAzC,KAAK,OAAA;AAAA,MAAK,OAAM;AAAA,IAAA,GAAA,MAAA,GAAA,UAAA;AAAA,IACxBH,WAAO,KAAA,QAAA,SAAA;AAAA,EAAA,CAAA;;;AChBJ,MAAM,eAIT;"}
// File: player.css
.ui-player-lite__video {
  width: 480px;
  height: 270px;
}
```
Проанализируй структуру, props, события, слоты, типы, внутреннюю логику.

====================================
2) Добавь недостающие комментарии к типам
====================================
Добавь краткие двуязычные (если уместно) или одноязычные (на ru) JSDoc-комментарии к отсутствующим типам.
Код для испправления:
```ts
// types.ts
// types.ts
/**
 * Определяет события, генерируемые компонентом UiPlayerLite.
 * Defines the events emitted by the UiPlayerLite component.
 */
export type UiPlayerLiteEmits = {
  /**
   * Событие изменения статуса проигрывателя.
   * Испускается при попытке изменить статус воспроизведения, например, при нажатии кнопки "Go".
   * Emitted when there's an attempt to change the player's status, e.g., by clicking "Go".
   * @event
   * @param {string} status - Новый статус проигрывателя ('play', 'pause', 'stop').
   */
  status: [status: string]
}

/**
 * Определяет слоты, доступные в компоненте UiPlayerLite.
 * Defines the slots available in the UiPlayerLite component.
 */
export interface UiPlayerLiteSlots {
  /**
   * Слот для размещения контента в верхней части компонента, перед статусом и видео.
   * Slot for content at the top of the component, before status and video.
   */
  top? (props: any): any
  /**
   * Слот для размещения контента в основной части компонента, после элемента видео.
   * Default slot for content, placed after the video element.
   */
  default? (props: any): any
}

/**
 * Определяет свойства (props) компонента UiPlayerLite.
 * Defines the properties (props) for the UiPlayerLite component.
 */
export interface UiPlayerLiteProps {
  /**
   * URL видеофайла для воспроизведения.
   * The URL of the video file to play.
   */
  url?: string
  /**
   * Текущий статус проигрывателя. По умолчанию 'stop'.
   * The current status of the player. Defaults to 'stop'.
   * @values 'play', 'pause', 'stop'
   */
  status?: 'play' | 'pause' | 'stop'
}

/**
 * Значения по умолчанию для свойств компонента UiPlayerLite.
 * Default values for UiPlayerLite component props.
 * @constant
 * @type {UiPlayerLiteProps}
 */
export const UiPlayerLiteDefaults: UiPlayerLiteProps = {
  status: 'stop'
}

```
Ниже продублируй итог без обёртки:
[types]

Требования к комментариям:
- Однострочные для простых полей.
- Многострочные для блоков логики.
- Без дублирования очевидного.

====================================
3) Истории (stories) для Storybook
====================================
Создай только минимально необходимые примеры. Каждый пример — максимально простой, без лишних обёрток, только то, что демонстрирует суть.
Код для испправления:
```ts
// ComponentDoc.stories.ts
import type { Meta, StoryObj } from '@storybook/vue3-vite'

import UiPlayerLite from './../UiPlayerLite.vue'
import { UiPlayerLiteWikiStorybook } from './wiki'

const meta = {
  title: '@dxt-ui/player/UiPlayerLite',
  component: UiPlayerLite,
  parameters: {
    docs: {
      description: {
        component: UiPlayerLiteWikiStorybook.getDescription()
      }
    }
  },
  argTypes: UiPlayerLiteWikiStorybook.getWiki(),
  args: UiPlayerLiteWikiStorybook.getValues()
} satisfies Meta<typeof UiPlayerLite>

export default meta

type Story = StoryObj<typeof meta>

export const Component: Story = {
  render: args => ({
    components: { UiPlayerLite },
    setup() {
      return { args }
    },
    template: `<div>
      <UiPlayerLite v-bind="args" />
    </div>`
  })
}

```
Правила:
- Не добавляй истории ради заполнения.
- Если компонент имеет разные режимы (например, состояния или варианты отображения), покажи по одному примеру.
- Имена историй — в стиле PascalCase без лишних слов.
- Минимизируй импорты: только то, что требуется.

====================================
4) MDX-документация (описание компонента)
====================================
Подготовь полное описание компонента в формате MDX. Строгая стилистика: никаких таблиц, никаких лишних разделов.
Код для испправления:
```md
// UiPlayerLite.mdx
import {Canvas, Meta} from '@storybook/addon-docs/blocks'
import {
    StorybookDescriptions,
    StorybookMain
} from '@dxt-ui/wiki/storybook'

import * as Component from './UiPlayerLite.stories'

<Meta of={Component}/>
<StorybookMain
    name={'UiPlayerLite'}
    description={'[description]'}
    story={Component.Component}
/>

[doc]

```

Правила структуры MDX:
- В начале: [description] — краткое описание назначения (1–2 абзаца).
- Далее: основной текст (документация) — начинается без заголовка. Это [doc].
- Обязательно перечисли слоты (если есть) и события (если есть) в заданном формате.
- Не описывай props списком, если они простые. Подробно описывай только сложные связки (например, зависимые props) или составные типы.
- Пример использования — в конце соответствующего смыслового блока или в самом низу, если один общий пример.
- Слоты и события — строго в формате ниже. Если типов нет — блок с типом опускается.

Формат слотов:
```
## слоты
### `имяСлота`
Краткое описание назначения слота. Можно маркированным списком выделить особенности.
```ts
// тип слота (если есть пропсы)
```
```
Если слотов несколько — каждый с подпунктом `###`.

Формат событий:
```
## события
### `имяСобытия`
Описание когда и зачем испускается.
```ts
// сигнатура обработчика
```
```

Пример блока props для связанных свойств (использовать ТОЛЬКО если реально нужно):
```
## Свойства выделения текста
... (как в примере ниже)
```

Пример описания слота (не вставляй дословно, адаптируй):
```
### `prefix`
Слот для размещения контента в начале компонента перед основным содержимым.
- Подходит для иконок, индикаторов или меток
- Не влияет на структуру
```

Пример описания события (адаптируй под контекст):
```
### `click`
Событие клика по корневой области компонента.
```ts
function onClick(event: MouseEvent, value: EventClickValue) {
  // обработка
}

type EventClickValue = {
  type: string
  value: any
  detail: Record<string, any> | undefined
}
```
```

====================================
5) Итоговый возврат
====================================
Верни результат строго в формате (ничего лишнего до или после):

// types.ts
[types.ts]
#########
// ComponentDoc.stories.ts
[ComponentDoc.stories.ts]
#########
// UiPlayerLite.mdx
[UiPlayerLite.mdx]

Где:
- [types.ts] — итоговый блок типов с комментариями.
- [ComponentDoc.stories.ts] — итоговый файл историй.
- [UiPlayerLite.mdx] — итоговая MDX-документация.

====================================
Ограничения и стилистика
====================================
- Никаких таблиц.
- Никаких произвольных дополнительных разделов.
- Не добавляй раздел "Props", если нет сложных зависимостей.
- Не дублируй описание одного и того же.
- Уважай язык ru — если это "en" используй английский, иначе соответствующий язык.
- Не используй placeholder'ы вне оговорённых.
- Кодовые блоки: для типов и событий — ```ts, для разметки — ```html при необходимости.
- Сторисы: только необходимые сценарии, без лишних визуальных украшений.

====================================
Пример (не включать в ответ, только как ориентир стиля)
====================================
## Свойства выделения текста

Свойства `highlight` и `highlightLengthStart` предназначены для управления выделением текста в компонентах.

### Свойства

- **highlight** — Текст для выделения в содержимом компоненте
- **highlightLengthStart** — Минимальная длина значения highlight для начала выделения

### Взаимосвязь свойств

Свойства работают совместно для обеспечения интеллектуального выделения текста. `highlight` определяет что выделять, а `highlightLengthStart` контролирует когда начинать выделение.

- `highlight` содержит строку текста, которую нужно найти и выделить в компоненте
- `highlightLengthStart` устанавливает минимальную длину строки поиска для активации функции выделения
- Выделение активируется только когда длина `highlight` достигает значения `highlightLengthStart`
- Это предотвращает нежелательное выделение при вводе коротких строк поиска
- Оба свойства обеспечивают оптимальный пользовательский опыт при работе с поиском и фильтрацией

