// types.ts
/**
 * Определяет события, генерируемые компонентом UiPlayerLite.
 * Defines the events emitted by the UiPlayerLite component.
 */
export type UiPlayerLiteEmits = {
  /**
   * Событие изменения статуса проигрывателя.
   * Испускается при попытке изменить статус воспроизведения, например, при нажатии кнопки "Go".
   * Emitted when there's an attempt to change the player's status, e.g., by clicking "Go".
   * @event
   * @param {string} status - Новый статус проигрывателя ('play', 'pause', 'stop').
   */
  status: [status: string]
}

/**
 * Определяет слоты, доступные в компоненте UiPlayerLite.
 * Defines the slots available in the UiPlayerLite component.
 */
export interface UiPlayerLiteSlots {
  /**
   * Слот для размещения контента в верхней части компонента, перед статусом и видео.
   * Slot for content at the top of the component, before status and video.
   */
  top? (props: any): any
  /**
   * Слот для размещения контента в основной части компонента, после элемента видео.
   * Default slot for content, placed after the video element.
   */
  default? (props: any): any
}

/**
 * Определяет свойства (props) компонента UiPlayerLite.
 * Defines the properties (props) for the UiPlayerLite component.
 */
export interface UiPlayerLiteProps {
  /**
   * URL видеофайла для воспроизведения.
   * The URL of the video file to play.
   */
  url?: string
  /**
   * Текущий статус проигрывателя. По умолчанию 'stop'.
   * The current status of the player. Defaults to 'stop'.
   * @values 'play', 'pause', 'stop'
   */
  status?: 'play' | 'pause' | 'stop'
}

/**
 * Значения по умолчанию для свойств компонента UiPlayerLite.
 * Default values for UiPlayerLite component props.
 * @constant
 * @type {UiPlayerLiteProps}
 */
export const UiPlayerLiteDefaults: UiPlayerLiteProps = {
  status: 'stop'
}
#########
// ComponentDoc.stories.ts
import type { Meta, StoryObj } from '@storybook/vue3-vite'

import UiPlayerLite from './../UiPlayerLite.vue'
import { UiPlayerLiteWikiStorybook } from './wiki'

const meta = {
  title: '@dxt-ui/player/UiPlayerLite',
  component: UiPlayerLite,
  parameters: {
    docs: {
      description: {
        component: UiPlayerLiteWikiStorybook.getDescription()
      }
    }
  },
  argTypes: UiPlayerLiteWikiStorybook.getWiki(),
  args: {
    url: 'https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-576p.mp4',
    status: 'stop',
    ...UiPlayerLiteWikiStorybook.getValues()
  }
} satisfies Meta<typeof UiPlayerLite>

export default meta

type Story = StoryObj<typeof meta>

export const Component: Story = {
  render: args => ({
    components: { UiPlayerLite },
    setup() {
      const handleStatusChange = (newStatus: string) => {
        console.log('Status changed:', newStatus);
      };
      return { args, handleStatusChange }
    },
    template: `
      <div>
        <p>Текущий статус: <strong>{{ args.status }}</strong></p>
        <UiPlayerLite v-bind="args" @status="handleStatusChange">
          <template #top>
            <div style="padding: 5px; background: #e0e0e0; border-radius: 4px; margin-bottom: 10px;">
              Верхний контент слота \`top\`
            </div>
          </template>
          <template #default>
            <div style="padding: 5px; background: #e0e0e0; border-radius: 4px; margin-top: 10px;">
              Нижний контент слота \`default\`
            </div>
          </template>
        </UiPlayerLite>
        <p style="margin-top: 10px;">Нажмите "Go", чтобы увидеть изменение статуса в консоли.</p>
      </div>`
  })
}
#########
// UiPlayerLite.mdx
import {Canvas, Meta} from '@storybook/addon-docs/blocks'
import {
    StorybookDescriptions,
    StorybookMain
} from '@dxt-ui/wiki/storybook'

import * as Component from './UiPlayerLite.stories'

<Meta of={Component}/>
<StorybookMain
    name={'UiPlayerLite'}
    description={'UiPlayerLite — это легковесный компонент-обёртка для HTML5-видеоплеера, предназначенный для базового отображения видеоконтента и управления его статусом. Он предоставляет простой интерфейс для воспроизведения видео по URL, отображения текущего статуса и базовой интеракции.'}
    story={Component.Component}
/>

Компонент `UiPlayerLite` инкапсулирует HTML5 `<video>` элемент, позволяя легко интегрировать функционал видеоплеера в ваше приложение. Он принимает URL видеофайла, отображает его текущий статус и предоставляет кнопку для запуска воспроизведения (эмулируя изменение статуса).

## слоты
### `top`
Слот для размещения контента в верхней части компонента, перед информацией о статусе и видеоплеером. Идеально подходит для добавления заголовков, элементов управления или других вспомогательных элементов, которые должны располагаться над основным видеоплеером.
- Используется для декоративного или функционального контента.
- Не влияет на логику воспроизведения видео.

```html
<UiPlayerLite>
  <template #top>
    <h3>Моё видео</h3>
  </template>
  <!-- ... -->
</UiPlayerLite>
```

### `default`
Слот для размещения контента в основной части компонента, после элемента `<video>`. Может быть использован для добавления описаний, элементов управления или других блоков информации, связанных с видео, но расположенных под ним.
- Позволяет расширить компонент дополнительными элементами.
- Содержимое слота отображается под видео.

```html
<UiPlayerLite>
  <!-- ... -->
  <template #default>
    <p>Краткое описание видео.</p>
  </template>
</UiPlayerLite>
```

## события
### `status`
Событие `status` испускается, когда пользователь взаимодействует с компонентом для изменения статуса воспроизведения. В текущей реализации оно генерируется при нажатии на кнопку "Go", передавая новый статус `'play'`. Предполагается, что внешний компонент будет реагировать на это событие и, при необходимости, обновлять пропс `status` для `UiPlayerLite`.
- Событие содержит текущий статус проигрывателя.
- Используется для внешней реакции на действия пользователя.

```ts
function onStatusChange(status: 'play' | 'pause' | 'stop') {
  console.log('Новый статус:', status);
}
```

Пример использования компонента:
```html
<template>
  <div class="video-container">
    <UiPlayerLite
      :url="videoUrl"
      :status="playerStatus"
      @status="handlePlayerStatusChange"
    >
      <template #top>
        <p>Сейчас играет: {{ videoTitle }}</p>
      </template>
      <template #default>
        <p>Продолжительность: {{ videoDuration }}</p>
      </template>
    </UiPlayerLite>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue'
import { UiPlayerLite } from '@dxt-ui/player' // Путь к вашему компоненту

const videoUrl = ref('https://cdn.plyr.io/static/demo/View_From_A_Blue_Moon_Trailer-576p.mp4')
const playerStatus = ref<'play' | 'pause' | 'stop'>('stop')
const videoTitle = ref('Трейлер "Вид с голубой луны"')
const videoDuration = ref('2:30')

const handlePlayerStatusChange = (newStatus: 'play' | 'pause' | 'stop') => {
  playerStatus.value = newStatus
  console.log('Изменение статуса плеера:', newStatus)
  // Здесь можно добавить логику для реального управления видеоэлементом,
  // например, через refs или более сложную логику.
}
</script>
```