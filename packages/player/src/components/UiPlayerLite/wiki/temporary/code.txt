// File: component-template.js
import { defineComponent, mergeDefaults, createElementBlock, openBlock, renderSlot, createTextVNode, createElementVNode, toDisplayString } from "/Volumes/T7/Git/dxt-ui/node_modules/vue/dist/vue.runtime.esm-bundler.js";
const UiPlayerLiteDefaults = {
  status: "stop"
};
const _sfc_main = /* @__PURE__ */ defineComponent({
  ...{
    name: "UiPlayerLite"
  },
  __name: "UiPlayerLite",
  props: /* @__PURE__ */ mergeDefaults({
    url: { type: String, required: false },
    status: { type: String, required: false }
  }, UiPlayerLiteDefaults),
  emits: ["status"],
  setup(__props, { expose: __expose }) {
    __expose();
    const __returned__ = {};
    Object.defineProperty(__returned__, "__isScriptSetup", { enumerable: false, value: true });
    return __returned__;
  }
});
const _export_sfc = (sfc, props) => {
  const target = sfc.__vccOpts || sfc;
  for (const [key, val] of props) {
    target[key] = val;
  }
  return target;
};
const _hoisted_1 = { class: "ui-player-lite" };
const _hoisted_2 = ["src"];
function _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {
  return openBlock(), createElementBlock("div", _hoisted_1, [
    renderSlot(_ctx.$slots, "top"),
    createTextVNode(
      " status: " + toDisplayString($props.status) + " ",
      1
      /* TEXT */
    ),
    createElementVNode("button", {
      onClick: _cache[0] || (_cache[0] = ($event) => _ctx.$emit("status", "play"))
    }, "Go"),
    createElementVNode("video", {
      src: $props.url,
      class: "ui-player-lite__video"
    }, null, 8, _hoisted_2),
    renderSlot(_ctx.$slots, "default")
  ]);
}
const item = /* @__PURE__ */ _export_sfc(_sfc_main, [["render", _sfc_render], ["__file", "/Volumes/T7/Git/dxt-ui/packages/player/src/components/UiPlayerLite/UiPlayerLite.vue"]]);
const UiPlayerLite = item;
export {
  UiPlayerLite
};
//# sourceMappingURL=component-template.js.map
// File: component-template.js.map
{"version":3,"file":"component-template.js","sources":["../../../types.ts","../../../UiPlayerLite.vue","../../../index.ts"],"sourcesContent":["// types.ts\n/**\n * Определяет события, генерируемые компонентом UiPlayerLite.\n * Defines the events emitted by the UiPlayerLite component.\n */\nexport type UiPlayerLiteEmits = {\n  /**\n   * Событие изменения статуса проигрывателя.\n   * Испускается при попытке изменить статус воспроизведения, например, при нажатии кнопки \"Go\".\n   * Emitted when there's an attempt to change the player's status, e.g., by clicking \"Go\".\n   * @event\n   * @param {string} status - Новый статус проигрывателя ('play', 'pause', 'stop').\n   */\n  status: [status: string]\n}\n\n/**\n * Определяет слоты, доступные в компоненте UiPlayerLite.\n * Defines the slots available in the UiPlayerLite component.\n */\nexport interface UiPlayerLiteSlots {\n  /**\n   * Слот для размещения контента в верхней части компонента, перед статусом и видео.\n   * Slot for content at the top of the component, before status and video.\n   */\n  top? (props: any): any\n  /**\n   * Слот для размещения контента в основной части компонента, после элемента видео.\n   * Default slot for content, placed after the video element.\n   */\n  default? (props: any): any\n}\n\n/**\n * Определяет свойства (props) компонента UiPlayerLite.\n * Defines the properties (props) for the UiPlayerLite component.\n */\nexport interface UiPlayerLiteProps {\n  /**\n   * URL видеофайла для воспроизведения.\n   * The URL of the video file to play.\n   */\n  url?: string\n  /**\n   * Текущий статус проигрывателя. По умолчанию 'stop'.\n   * The current status of the player. Defaults to 'stop'.\n   * @values 'play', 'pause', 'stop'\n   */\n  status?: 'play' | 'pause' | 'stop'\n}\n\n/**\n * Значения по умолчанию для свойств компонента UiPlayerLite.\n * Default values for UiPlayerLite component props.\n * @constant\n * @type {UiPlayerLiteProps}\n */\nexport const UiPlayerLiteDefaults: UiPlayerLiteProps = {\n  status: 'stop'\n}\n","<script setup lang=\"ts\">\nimport {\n  UiPlayerLiteDefaults,\n  type UiPlayerLiteEmits,\n  type UiPlayerLiteProps,\n  type UiPlayerLiteSlots\n} from './types'\n\ndefineOptions({\n  name: 'UiPlayerLite'\n})\n\nwithDefaults(defineProps<UiPlayerLiteProps>(), UiPlayerLiteDefaults)\ndefineEmits<UiPlayerLiteEmits>()\ndefineSlots<UiPlayerLiteSlots>()\n</script>\n\n<template>\n  <div class=\"ui-player-lite\">\n    <slot name=\"top\"/>\n    status: {{ status }}\n    <button @click=\"$emit('status', 'play')\">Go</button>\n    <video :src=\"url\" class=\"ui-player-lite__video\"/>\n    <slot/>\n  </div>\n</template>\n\n<style lang=\"scss\">\n.ui-player-lite {\n  &__video {\n    width: 480px;\n    height: 270px;\n  }\n}\n</style>\n","import type { DefineSetupFnComponent, ShortEmitsToObject, SlotsType } from 'vue'\nimport type { UiPlayerLiteEmits, UiPlayerLiteProps, UiPlayerLiteSlots } from './types'\n\nimport item from './UiPlayerLite.vue'\n\nexport type * from './types'\n\nexport const UiPlayerLite: DefineSetupFnComponent<\n  UiPlayerLiteProps,\n  ShortEmitsToObject<UiPlayerLiteEmits>,\n  SlotsType<UiPlayerLiteSlots>\n> = item\n"],"names":["_openBlock","_createElementBlock","_renderSlot","_createTextVNode","_toDisplayString","_createElementVNode"],"mappings":";AAyDO,MAAM,uBAA0C;AAAA,EACrD,QAAQ;AACV;;;;;;;;;;;;;;;;;;;;;;;;;ACzCO,MAAA,aAAA,EAAA,OAAM,iBAAA;;;AAAX,SAAAA,UAAA,GAAAC,mBAMM,OANN,YAMM;AAAA,IALJC,WAAkB,KAAA,QAAA,KAAA;AAAA,IAAAC;AAAAA,MAAA,cACVC,gBAAG,aAAM,IAAG;AAAA,MACpB;AAAA;AAAA,IAAA;AAAA,IAAAC,mBAAoD,UAAA;AAAA,MAA3C,SAAK,sCAAE,KAAA,MAAK,UAAA,MAAA;AAAA,IAAA,GAAoB,IAAE;AAAA,IAC3CA,mBAAiD,SAAA;AAAA,MAAzC,KAAK,OAAA;AAAA,MAAK,OAAM;AAAA,IAAA,GAAA,MAAA,GAAA,UAAA;AAAA,IACxBH,WAAO,KAAA,QAAA,SAAA;AAAA,EAAA,CAAA;;;AChBJ,MAAM,eAIT;"}
// File: player.css
.ui-player-lite__video {
  width: 480px;
  height: 270px;
}