// types.ts
/**
 * Определяет события, генерируемые компонентом UiPlayerLite.
 * Defines the events emitted by the UiPlayerLite component.
 */
export type UiPlayerLiteEmits = {
  /**
   * Событие изменения статуса проигрывателя.
   * Испускается при попытке изменить статус воспроизведения, например, при нажатии кнопки "Go".
   * Emitted when there's an attempt to change the player's status, e.g., by clicking "Go".
   * @event
   * @param {string} status - Новый статус проигрывателя ('play', 'pause', 'stop').
   */
  status: [status: string]
}

/**
 * Определяет слоты, доступные в компоненте UiPlayerLite.
 * Defines the slots available in the UiPlayerLite component.
 */
export interface UiPlayerLiteSlots {
  /**
   * Слот для размещения контента в верхней части компонента, перед статусом и видео.
   * Slot for content at the top of the component, before status and video.
   */
  top? (props: any): any
  /**
   * Слот для размещения контента в основной части компонента, после элемента видео.
   * Default slot for content, placed after the video element.
   */
  default? (props: any): any
}

/**
 * Определяет свойства (props) компонента UiPlayerLite.
 * Defines the properties (props) for the UiPlayerLite component.
 */
export interface UiPlayerLiteProps {
  /**
   * URL видеофайла для воспроизведения.
   * The URL of the video file to play.
   */
  url?: string
  /**
   * Текущий статус проигрывателя. По умолчанию 'stop'.
   * The current status of the player. Defaults to 'stop'.
   * @values 'play', 'pause', 'stop'
   */
  status?: 'play' | 'pause' | 'stop'
}

/**
 * Значения по умолчанию для свойств компонента UiPlayerLite.
 * Default values for UiPlayerLite component props.
 * @constant
 * @type {UiPlayerLiteProps}
 */
export const UiPlayerLiteDefaults: UiPlayerLiteProps = {
  status: 'stop'
}
#########
// ComponentDoc.stories.ts
import type { Meta, StoryObj } from '@storybook/vue3-vite'

import UiPlayerLite from './../UiPlayerLite.vue'
import { UiPlayerLiteWikiStorybook } from './wiki'

const meta = {
  title: '@dxt-ui/player/UiPlayerLite',
  component: UiPlayerLite,
  parameters: {
    docs: {
      description: {
        component: UiPlayerLiteWikiStorybook.getDescription()
      }
    }
  },
  argTypes: UiPlayerLiteWikiStorybook.getWiki(),
  args: UiPlayerLiteWikiStorybook.getValues()
} satisfies Meta<typeof UiPlayerLite>

export default meta

type Story = StoryObj<typeof meta>

export const Default: Story = {
  args: {
    url: undefined,
    status: 'stop'
  },
  render: args => ({
    components: { UiPlayerLite },
    setup() {
      return { args }
    },
    template: `
      <div>
        <UiPlayerLite v-bind="args">
          <template #top>
            <p>Это контент в слоте `top`.</p>
          </template>
          <template #default>
            <p>Это контент в слоте `default`.</p>
          </template>
        </UiPlayerLite>
      </div>`
  })
}

export const Playing: Story = {
  args: {
    url: 'https://www.w3schools.com/html/mov_bbb.mp4', // Пример URL видео
    status: 'play'
  },
  render: args => ({
    components: { UiPlayerLite },
    setup() {
      return { args }
    },
    template: `
      <div>
        <UiPlayerLite v-bind="args" />
      </div>`
  })
}
#########
// UiPlayerLite.mdx
import {Canvas, Meta} from '@storybook/addon-docs/blocks'
import {
    StorybookDescriptions,
    StorybookMain
} from '@dxt-ui/wiki/storybook'

import * as Component from './UiPlayerLite.stories'

<Meta of={Component}/>
<StorybookMain
    name={'UiPlayerLite'}
    description={'Компонент `UiPlayerLite` представляет собой простой видеоплеер для базового воспроизведения медиафайлов, отображения текущего статуса и инициирования его изменения.'}
    story={Component.Default}
/>

Компонент `UiPlayerLite` предоставляет базовую функциональность для встраивания и управления воспроизведением видео. Он позволяет задать URL видеофайла, отображает его текущий статус и предоставляет кнопку для запуска воспроизведения. Размеры видеоплеера по умолчанию составляют 480x270 пикселей.

## слоты
### `top`
Слот для размещения произвольного контента в верхней части компонента, перед информацией о статусе и видеоплеером. Идеально подходит для заголовков, префиксов или дополнительных элементов управления.

### `default`
Основной слот для размещения контента, который будет отображаться после видеоплеера. Может использоваться для дополнительных элементов, таких как субтитры, контролы или любая другая информация, связанная с видео.

## события
### `status`
Событие испускается при попытке изменить статус воспроизведения. В текущей реализации генерируется при нажатии кнопки "Go", передавая статус 'play'.

```ts
function onStatusChange(status: 'play' | 'pause' | 'stop'): void {
  // Обработка изменения статуса проигрывателя
  console.log('Новый статус:', status);
}
```