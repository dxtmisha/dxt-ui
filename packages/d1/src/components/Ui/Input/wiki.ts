import { type StorybookProps, WikiStorybook } from '@dxtmisha/wiki'
import { wiki, wikiDescriptions } from '@dxtmisha/wiki/media'

import { wikiD1 } from '../../../wiki/wiki'
import { defaults } from './props'

const propsNames: StorybookProps = [
  // :propsList [!] System label / Системная метка
  { name: 'align', type: 'string', option: ['center', 'right', 'left'] },
  { name: 'arrowStep', type: 'NumberOrString' },
  { name: 'autocapitalize', type: 'string', option: ['off', 'none', 'sentences', 'words', 'characters'] },
  { name: 'autocomplete', type: 'string' },
  { name: 'autocorrect', type: 'string', option: ['on', 'off'] },
  { name: 'autofocus', type: 'boolean' },
  { name: 'cancel', type: 'string', option: ['auto', 'always'] },
  { name: 'cancelShow', type: 'boolean' },
  { name: 'caption', type: 'string | number' },
  { name: 'counterShow', type: 'boolean' },
  { name: 'currency', type: 'string' },
  { name: 'currencyHide', type: 'boolean' },
  { name: 'detail', type: 'Record<string, any>' },
  { name: 'disabled', type: 'boolean' },
  { name: 'enterKeyHint', type: 'string', option: ['enter', 'done', 'go', 'next', 'previous', 'search', 'send'] },
  { name: 'fieldAttrs', type: 'ConstrBind<FieldPropsBasic<IconPropsBasic<ImagePropsBasic>, FieldLabelPropsBasic<FieldCounterPropsBasic, ProgressPropsBasic>, FieldMessagePropsBasic<...>, FieldCounterPropsBasic, ProgressPropsBasic>>' },
  { name: 'fieldCounterAttrs', type: 'ConstrBind<FieldCounterPropsBasic>' },
  { name: 'fieldLabelAttrs', type: 'ConstrBind<FieldLabelPropsBasic<FieldCounterPropsBasic, ProgressPropsBasic>>' },
  { name: 'fieldMessageAttrs', type: 'ConstrBind<FieldMessagePropsBasic<FieldCounterPropsBasic>>' },
  { name: 'focus', type: 'boolean' },
  { name: 'forceShowMessage', type: 'boolean' },
  { name: 'form', type: 'string' },
  { name: 'helperMessage', type: 'string' },
  { name: 'icon', type: 'IconValue<IconPropsBasic<ImagePropsBasic>>' },
  { name: 'iconAttrs', type: 'ConstrBind<IconPropsBasic<ImagePropsBasic>>' },
  { name: 'iconDir', type: 'boolean' },
  { name: 'iconHide', type: 'boolean' },
  { name: 'iconPalette', type: 'boolean' },
  { name: 'iconTrailing', type: 'IconValue<IconPropsBasic<ImagePropsBasic>>' },
  { name: 'iconTrailingDirOnly', type: 'boolean' },
  { name: 'iconTrailingPalette', type: 'boolean' },
  { name: 'iconTrailingTurnOnly', type: 'boolean' },
  { name: 'iconTurn', type: 'boolean' },
  { name: 'iconVisibility', type: 'string' },
  { name: 'iconVisibilityOff', type: 'string' },
  { name: 'id', type: 'string' },
  { name: 'inputAttrs', type: 'Record<string, any>' },
  { name: 'inputMode', type: 'string', option: ['none', 'text', 'decimal', 'numeric', 'tel', 'search', 'email', 'url'] },
  { name: 'isSkeleton', type: 'boolean' },
  { name: 'label', type: 'NumberOrString' },
  { name: 'list', type: 'string' },
  { name: 'loading', type: 'boolean | ConstrBind<ProgressPropsBasic>' },
  { name: 'mask', type: 'string | ConstrBind<MaskPropsBasic>' },
  { name: 'maskAttrs', type: 'ConstrBind<MaskPropsBasic>' },
  { name: 'maskNone', type: 'boolean' },
  { name: 'maskVisible', type: 'boolean' },
  { name: 'match', type: 'FieldMatch' },
  { name: 'max', type: 'NumberOrString' },
  { name: 'maxlength', type: 'NumberOrString' },
  { name: 'min', type: 'NumberOrString' },
  { name: 'minlength', type: 'NumberOrString' },
  { name: 'modelValue', type: 'NumberOrString' },
  { name: 'name', type: 'string' },
  { name: 'onUpdate:modelValue', type: '(value: NumberOrString) => void' },
  { name: 'onUpdate:value', type: '(value: NumberOrString) => void' },
  { name: 'pattern', type: 'string' },
  { name: 'placeholder', type: 'string' },
  { name: 'prefix', type: 'string | number' },
  { name: 'readonly', type: 'boolean' },
  { name: 'required', type: 'boolean' },
  { name: 'selected', type: 'boolean' },
  { name: 'spellcheck', type: 'string', option: ['true', 'false'] },
  { name: 'step', type: 'NumberOrString' },
  { name: 'suffix', type: 'string | number' },
  { name: 'tabindex', type: 'number' },
  { name: 'type', type: 'string', option: ['number', 'text', 'search', 'number-format', 'currency', 'email', 'password', 'datetime', 'date', 'year-month', 'time', 'hour-minute', 'tel', 'url', 'checkbox', 'radio'] },
  { name: 'validationCode', type: 'FieldValidityCode' },
  { name: 'validationMessage', type: 'string' },
  { name: 'value', type: 'NumberOrString' }
  // :propsList [!] System label / Системная метка
]

export const InputWikiStorybook = new WikiStorybook(
  'Input',
  propsNames,
  defaults,
  wikiD1,
  wiki,
  wikiDescriptions
)
